#!/usr/bin/env bash
#
# The script tries to figure out which of the configured NSS modules can resolve the given user.
# 
# It iterates through all configured passwd modules in nsswitch.conf and for each entry it mounts
# an individual nsswitch.conf in a shell with an unshared mount namespace to check if the user can
# be found.
# 
#
#   ToDo:   - Non existing NSS modules are reported as a user not found.
#
#   Changelog:  03.07.2021  v0.1    Sören Schmidt       - First creation
#               05.07.2021  v0.1.1  Sören Schmidt       - small fixes in description

set -u

version='0.1.1'

LOCAL_NSSWITCH=$(mktemp)

function cleanup() {
    [ -e "${LOCAL_NSSWITCH}" ] && rm -f "${LOCAL_NSSWITCH}"
}

# Check parameters.
if [ $# -ne 1 ] ; then
    echo -e "Usage: ${0##*/} USERNAME\nv${version}\n"
    echo -e "    USERNAME   Name of the user\n" 
    exit 0    
fi
user="${1}"

# Set cleanup routine.
trap cleanup EXIT

# Walk through the configured modules for 'passwd' and use them to resolve the user.
exitcode=1
for module in $(grep '^passwd:' /etc/nsswitch.conf | cut -d: -f2 | sed -r 's/\[[^]]*\]//g ; s/[[:space:]]+/ /g') ; do 
    echo -n "${module}:  "

    # Create modified copy of nsswitch.conf.
    sed "/^passwd:/s/.*/passwd: ${module}/" /etc/nsswitch.conf > "${LOCAL_NSSWITCH}"

    # Ask for the user.
    unshare -m bash <( echo "mount --bind ${LOCAL_NSSWITCH} /etc/nsswitch.conf && id ${user}" )
    [ $? -eq 0 ] && exitcode=0

done

# Bye.
exit ${exitcode}

